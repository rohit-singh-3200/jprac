1. Subqueries in SQL
A subquery is a query inside another query. It's used to return a result that is then used by the outer query. Subqueries can be used in SELECT, INSERT, UPDATE, and DELETE statements.

Types of Subqueries:
Single-row Subquery: Returns a single value.

Multiple-row Subquery: Returns more than one value.

Correlated Subquery: The inner query depends on the outer query.

Examples:
Subquery Example (Single-row):
Find students whose marks are greater than the average marks of all students.

sql
Copy
Edit
SELECT name, marks
FROM students
WHERE marks > (SELECT AVG(marks) FROM students);
The subquery (SELECT AVG(marks) FROM students) calculates the average marks.

The outer query returns the students who have marks greater than that average.

Subquery Example (Multiple-row):
Find students from the 'CSE' and 'IT' departments:

sql
Copy
Edit
SELECT name, department_id
FROM students
WHERE department_id IN (SELECT department_id FROM departments WHERE department_name IN ('CSE', 'IT'));
The inner subquery returns the department_id values for 'CSE' and 'IT'.

The outer query uses those department_id values to fetch students from these departments.

Correlated Subquery Example:
Find students who have marks greater than the average marks in their department:

sql
Copy
Edit
SELECT name, marks
FROM students s
WHERE marks > (SELECT AVG(marks) FROM students WHERE department_id = s.department_id);
The inner query is correlated with the outer query because it uses s.department_id from the outer query to calculate the department's average marks.

2. Views in SQL
A view is a virtual table that is based on the result of a query. It doesnâ€™t store data itself but shows data from one or more tables. Views are used to simplify complex queries and provide a consistent way to query data.

How to Create a View:
You create a view using the CREATE VIEW statement.

Once created, you can query a view just like a regular table.

Example:
Creating a Simple View:

sql
Copy
Edit
CREATE VIEW student_details AS
SELECT student_id, name, department_id, marks
FROM students;
This view simplifies the query by selecting specific columns from the students table.

You can now query the view like this:

sql
Copy
Edit
SELECT * FROM student_details;
View with Aggregation:
Create a view that shows the average marks for each department:

sql
Copy
Edit
CREATE VIEW avg_marks_by_dept AS
SELECT department_id, AVG(marks) AS avg_marks
FROM students
GROUP BY department_id;
Now you can query the average marks per department from the view:

sql
Copy
Edit
SELECT * FROM avg_marks_by_dept;
Updating and Deleting Data via Views:

Some views are updatable, meaning you can insert, update, or delete data through the view if the view is simple and directly maps to the underlying table.

Example:

sql
Copy
Edit
UPDATE student_details
SET marks = 85
WHERE name = 'Alice';
However, complex views (involving joins, aggregations, etc.) are generally non-updatable.

Summary of Differences:
Feature	Subqueries	Views
Definition	A query within another query.	A virtual table created by a SELECT query.
Execution	Executed once for each row processed in outer query.	Query execution is deferred when the view is queried.
Performance	Can affect performance due to repeated execution.	Can simplify complex queries and improve readability.
Updateable	Can sometimes update data in the base tables.	Generally non-updatable, but simple views can be.
Usage	Used for filtering, aggregation, etc.	Used to simplify complex queries or hide data complexity.